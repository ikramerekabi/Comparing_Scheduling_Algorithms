#include <iostream>
#include <queue>
#include <fstream>
using namespace std;



typedef struct process{
    int pid;
    int arrival_time;
    int burst_time;
    int start_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int response_time;
    
}process;


bool comparator1(process p1, process p2)
{
    return p1.arrival_time < p2.arrival_time;
}

bool comparator2(process p1, process p2)
{
    return p1.pid < p2.pid;
}

int main() {

    int n;  // fix it mmba3d
    int time_quantum = 2;  //
    struct process arr[100];
    float avg_turnaround_time;
    float avg_waiting_time;
    float avg_response_time;
    float cpu_utilisation;
    int total_turnaround_time = 0;
    int total_waiting_time = 0;
    int total_response_time = 0;
    int total_idle_time = 0;
    float throughput;
    int burst_remaining[n];
    int eligibal_proc;
    int current_time = 0;
    int completed = 0;
    int mark[100];
    mark[0] = 1;

    queue<int> q;
   
    
//    cout<<"Please enter the number of processes: ";
//    cin>>n;
//    cout<<"Pleas enter time quantum: ";
//    cin>>time_quantum;
//
//    for(int i = 0; i < n; i++) {
//        cout<<"Enter arrival time of process "<<i+1<<": ";
//        cin>>arr[i].arrival_time;
//        cout<<"Enter burst time of process "<<i+1<<": ";
//        cin>>arr[i].burst_time;
//        burst_remaining[i] = arr[i].burst_time;
//        arr[i].pid = i+1;
//        cout<<endl;
//    }

    sort(arr,arr+n,comparator1);  // sort based on the arriving time.
    memset(mark,0,sizeof(mark)); // set all processs to uncomplete
    
    
    q.push(0);

    while(completed != n) {
        eligibal_proc = q.front();
        q.pop();

        if(burst_remaining[eligibal_proc] == arr[eligibal_proc].burst_time) {
            arr[eligibal_proc].start_time = max(current_time,arr[eligibal_proc].arrival_time);
            current_time = arr[eligibal_proc].start_time;
        }

        if(burst_remaining[eligibal_proc]-time_quantum > 0) {
            burst_remaining[eligibal_proc] -= time_quantum;
            current_time += time_quantum;
        }
        else {
            current_time += burst_remaining[eligibal_proc];
            burst_remaining[eligibal_proc] = 0;
            completed++;

            arr[eligibal_proc].completion_time = current_time;
            arr[eligibal_proc].turnaround_time = arr[eligibal_proc].completion_time - arr[eligibal_proc].arrival_time;
            arr[eligibal_proc].waiting_time = arr[eligibal_proc].turnaround_time - arr[eligibal_proc].burst_time;
            arr[eligibal_proc].response_time = arr[eligibal_proc].start_time - arr[eligibal_proc].arrival_time;

            total_turnaround_time += arr[eligibal_proc].turnaround_time;
            total_waiting_time += arr[eligibal_proc].waiting_time;
            total_response_time += arr[eligibal_proc].response_time;
        }

        for(int i = 1; i < n; i++) {
            if(burst_remaining[i] > 0 && arr[i].arrival_time <= current_time && mark[i] == 0) {
                q.push(i);
                mark[i] = 1;
            }
        }
        if(burst_remaining[eligibal_proc] > 0) {
            q.push(eligibal_proc);
        }

        if(q.empty()) {
            for(int i = 1; i < n; i++) {
                if(burst_remaining[i] > 0) {
                    q.push(i);
                    mark[i] = 1;
                    break;
                }
            }
        }


    }

    avg_turnaround_time = (float) total_turnaround_time / n;
    avg_waiting_time = (float) total_waiting_time / n;
    avg_response_time = (float) total_response_time / n;

    sort(arr,arr+n,comparator2); // sort based on the pid

    cout<<endl;
    cout<<"#P\t"<<"TAT\t"<<"WT\t"<<"RT\t"<<"\n"<<endl;

    for(int i = 0; i < n; i++) {
        cout<<arr[i].pid<<"\t"<<arr[i].turnaround_time<<"\t"<<arr[i].waiting_time<<"\t"<<arr[i].response_time<<"\t"<<"\n"<<endl;
    }
    cout<<"Avg Turnaround Time = "<<avg_turnaround_time<<endl;
    cout<<"Avg Waiting Time = "<<avg_waiting_time<<endl;
    cout<<"Avg Response Time = "<<avg_response_time<<endl;

    
}
